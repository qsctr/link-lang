var l = []; function g(s) { return x => { if (s[x] !== undefined) return s[x]; var c = a => a[1][x] !== undefined; if (l.some(c)) return l.find(c)[1][x]; throw new Error('function ' + x + ' is not in scope'); }; } var s = {}; var f = g(s); var tls = s; l.push(['trade', (function () { var fs = require('fs'); var nk = false; function n(a) { return x => x[0] === a; } function z(a) { if (nk) throw new Error('Juche'); if (l.some(n(a))) throw new Error('Module ' + a + ' is already imported'); try { fs.statSync('./' + a + '.js'); return require('./' + a + '.js'); } catch (e1) { try { fs.statSync(p + a + '.js'); return require(p + a + '.js'); } catch (e2) { throw new Error('There is something wrong with module ' + a); } } } return { 'import': function () { var args = Array.prototype.slice.call(arguments); l.push.apply(l, args.map(a => [a, z(a)])); return args; }, 'import-ant': function () { var args = Array.prototype.slice.call(arguments); l.unshift.apply(l, args.map(a => [a, z(a)])); return args; }, 'north-korea': () => nk = true, deport: a => l.splice(l.findIndex(n(a)), 1), 'export-only': function () { Array.prototype.slice.call(arguments).forEach(x => module.exports[x] = f(x)); }, 'export-all': () => module.exports = tls, 'export-all-except': function () { module.exports = tls; Array.prototype.slice.call(arguments).forEach(x => module.exports[x] = undefined); } }; }())]); l.push(['essential', { 'do': function () { return arguments[arguments.length - 1]; }, id: x => x, 'do-at': function (n) { return arguments[n] }}]);
